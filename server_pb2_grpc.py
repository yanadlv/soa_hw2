# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import server_pb2 as server__pb2


class MafiaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetUsername = channel.unary_unary(
                '/MafiaService/SetUsername',
                request_serializer=server__pb2.SetUsernameRequest.SerializeToString,
                response_deserializer=server__pb2.SetUsernameResponse.FromString,
                )
        self.GetConnectedPlayers = channel.unary_unary(
                '/MafiaService/GetConnectedPlayers',
                request_serializer=server__pb2.GetConnectedPlayersRequest.SerializeToString,
                response_deserializer=server__pb2.GetConnectedPlayersResponse.FromString,
                )
        self.SubscribeToNotifications = channel.unary_stream(
                '/MafiaService/SubscribeToNotifications',
                request_serializer=server__pb2.SubscribeToNotificationsRequest.SerializeToString,
                response_deserializer=server__pb2.PlayerNotification.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/MafiaService/SendMessage',
                request_serializer=server__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=server__pb2.SendMessageResponse.FromString,
                )
        self.GetRepliesCount = channel.unary_unary(
                '/MafiaService/GetRepliesCount',
                request_serializer=server__pb2.GetRepliesCountRequest.SerializeToString,
                response_deserializer=server__pb2.GetRepliesCountResponse.FromString,
                )
        self.MorningAfter = channel.unary_unary(
                '/MafiaService/MorningAfter',
                request_serializer=server__pb2.MorningAfterRequest.SerializeToString,
                response_deserializer=server__pb2.MorningAfterResponse.FromString,
                )
        self.Voted = channel.unary_unary(
                '/MafiaService/Voted',
                request_serializer=server__pb2.VotedRequest.SerializeToString,
                response_deserializer=server__pb2.VotedResponse.FromString,
                )
        self.Role = channel.unary_unary(
                '/MafiaService/Role',
                request_serializer=server__pb2.RoleRequest.SerializeToString,
                response_deserializer=server__pb2.RoleResponse.FromString,
                )
        self.New = channel.unary_unary(
                '/MafiaService/New',
                request_serializer=server__pb2.NewRequest.SerializeToString,
                response_deserializer=server__pb2.NewResponse.FromString,
                )


class MafiaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetUsername(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConnectedPlayers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToNotifications(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRepliesCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MorningAfter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Voted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Role(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def New(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MafiaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUsername,
                    request_deserializer=server__pb2.SetUsernameRequest.FromString,
                    response_serializer=server__pb2.SetUsernameResponse.SerializeToString,
            ),
            'GetConnectedPlayers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnectedPlayers,
                    request_deserializer=server__pb2.GetConnectedPlayersRequest.FromString,
                    response_serializer=server__pb2.GetConnectedPlayersResponse.SerializeToString,
            ),
            'SubscribeToNotifications': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToNotifications,
                    request_deserializer=server__pb2.SubscribeToNotificationsRequest.FromString,
                    response_serializer=server__pb2.PlayerNotification.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=server__pb2.SendMessageRequest.FromString,
                    response_serializer=server__pb2.SendMessageResponse.SerializeToString,
            ),
            'GetRepliesCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRepliesCount,
                    request_deserializer=server__pb2.GetRepliesCountRequest.FromString,
                    response_serializer=server__pb2.GetRepliesCountResponse.SerializeToString,
            ),
            'MorningAfter': grpc.unary_unary_rpc_method_handler(
                    servicer.MorningAfter,
                    request_deserializer=server__pb2.MorningAfterRequest.FromString,
                    response_serializer=server__pb2.MorningAfterResponse.SerializeToString,
            ),
            'Voted': grpc.unary_unary_rpc_method_handler(
                    servicer.Voted,
                    request_deserializer=server__pb2.VotedRequest.FromString,
                    response_serializer=server__pb2.VotedResponse.SerializeToString,
            ),
            'Role': grpc.unary_unary_rpc_method_handler(
                    servicer.Role,
                    request_deserializer=server__pb2.RoleRequest.FromString,
                    response_serializer=server__pb2.RoleResponse.SerializeToString,
            ),
            'New': grpc.unary_unary_rpc_method_handler(
                    servicer.New,
                    request_deserializer=server__pb2.NewRequest.FromString,
                    response_serializer=server__pb2.NewResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MafiaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MafiaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaService/SetUsername',
            server__pb2.SetUsernameRequest.SerializeToString,
            server__pb2.SetUsernameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConnectedPlayers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaService/GetConnectedPlayers',
            server__pb2.GetConnectedPlayersRequest.SerializeToString,
            server__pb2.GetConnectedPlayersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MafiaService/SubscribeToNotifications',
            server__pb2.SubscribeToNotificationsRequest.SerializeToString,
            server__pb2.PlayerNotification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaService/SendMessage',
            server__pb2.SendMessageRequest.SerializeToString,
            server__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRepliesCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaService/GetRepliesCount',
            server__pb2.GetRepliesCountRequest.SerializeToString,
            server__pb2.GetRepliesCountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MorningAfter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaService/MorningAfter',
            server__pb2.MorningAfterRequest.SerializeToString,
            server__pb2.MorningAfterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Voted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaService/Voted',
            server__pb2.VotedRequest.SerializeToString,
            server__pb2.VotedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Role(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaService/Role',
            server__pb2.RoleRequest.SerializeToString,
            server__pb2.RoleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def New(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaService/New',
            server__pb2.NewRequest.SerializeToString,
            server__pb2.NewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
